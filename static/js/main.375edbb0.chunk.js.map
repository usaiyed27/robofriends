{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","inputChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onInputChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filterRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAaeA,EAVF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACzB,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BL,EAA1B,cACpB,4BAAKC,GACL,2BAAIC,KCkBQI,EAvBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACE,6BAOGA,EAAOC,KAAI,SAACC,EAAKC,GACnB,OACC,kBAAC,EAAD,CACAC,IAAOJ,EAAOG,GAAGV,GACjBA,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCePU,EAdG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAClB,OACE,6BACE,wBAAIV,UAAU,MAAd,eACA,2BACAA,UAAY,kCACZW,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCjBHI,EARA,SAACC,GACf,OACC,yBAAKC,MAAQ,CAACC,UAAW,SAASC,OAAQ,kBAAmBC,OAAO,UACnEJ,EAAMK,WCsCMC,G,wDApCd,aAAc,IAAD,8BACZ,gBAcDC,cAAgB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAd1C,EAAKC,MACF,CACFxB,OAAS,GACTqB,YAAa,IALF,E,gEASO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEpB,OAAQ6B,S,+BAO/B,IAAD,EACyBC,KAAKN,MAA7BxB,EADD,EACCA,OAAQqB,EADT,EACSA,YACVU,EAAe/B,EAAOgC,QAAO,SAAAC,GAClC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAASd,EAAYa,kBAGtD,OAAQlC,EAAOoC,OAEd,yBAAKxC,UAAU,MACf,kBAAC,EAAD,CAAWU,YAAewB,KAAKZ,gBAC/B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUlB,OAAU+B,MAJpB,2C,GA3BeM,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCLNC,IAASC,OACP,6BACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.375edbb0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { robots } from '../robots';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib pa3 ma2 br2 grow bw2 shadow-5'>\r\n\t\t <img alt='robot' src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t <h2>{name}</h2>\r\n\t\t <p>{email}</p>\r\n\t\t </div>\r\n\t)\r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn(\r\n\t  <div>\r\n\t   {\r\n\t   \t//React keeps track of what all these cards are\r\n// \t\t//If it doesn't have key prop React has to change the entire dom\r\n// \t\t// But when you add the unique key React is able to \r\n// \t\t// find that particular and delete it.\r\n// \t\t// Key should be unique that doesn't change.\r\n\t   \t robots.map((user,i) =>{\r\n\t\t \treturn(\r\n\t\t\t  <Card \r\n\t\t\t  key = {robots[i].id}\r\n\t\t\t  id={robots[i].id} \r\n\t\t\t  name={robots[i].name} \r\n\t\t\t  email={robots[i].email} />\r\n\t\t\t)\r\n\t\t })\r\n\t   }\r\n\t  </div>\r\n\t)\r\n}\r\n\r\nexport default CardList;","// import React from 'react';\r\n\r\n// const SearchBox = ({searchfield, inputChange}) => {\r\n//   return(\r\n//     <div className='pa2'>\r\n//       <input\r\n//       className = \"pa3 ba b-green bg-lightest-blue\" \r\n//       type='search' \r\n//       placeholder='search robots' \r\n//       onChange = {inputChange}\r\n//       />\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// export default SearchBox\r\n\r\nimport React from 'react';\r\n\r\nconst SearchBox = ({inputChange}) => {\r\n  return(\r\n    <div>\r\n      <h1 className='f2'>Robofriends</h1>\r\n      <input \r\n      className = 'pa3 ba b-green bg-lightest-blue'\r\n      type='search' \r\n      placeholder='search robots'\r\n      onChange = {inputChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t <div style ={{overflowY: 'scroll',border: '5px solid black', height:'500px'}}>\t\r\n\t\t{props.children}\r\n\t </div>\t\r\n\t)\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t super()\r\n\t this.state = \r\n\t    {\r\n\t\t\trobots : [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({ robots: users }))\r\n\t}\r\n\r\n\tonInputChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value })\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst { robots, searchfield } = this.state;\r\n\t\tconst filterRobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\r\n\t\treturn !robots.length ?\r\n\t\t <h1>Loading</h1> :\r\n\t\t <div className='tc'>\r\n\t\t\t<SearchBox inputChange = {this.onInputChange} />\r\n\t\t\t<Scroll>\r\n\t\t\t<CardList robots = {filterRobots}/>\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//react is view library\nimport React from 'react';\n// ReactDom is used for DOM, for websites\nimport ReactDOM from 'react-dom';\n// ./ means the file is in the same folder.\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// use destructuring when have multiple exports\n// e.g { robots, cats}\n\t\n\nReactDOM.render(\n  <div>\n  \t<App />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}